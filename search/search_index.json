{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Seyed Amir Alavi | Engineer/Artist Blog","text":"<p>As an embedded systems engineer, I have designed different types of embedded systems in several areas such as the Internet of Things (IoT), industrial control systems, and communication networks. I try to employ the latest technologies for software and hardware development, from embedded Linux to different real-time operating systems (RTOSs), and agile software development processes. Model-based embedded system design and implementation is my main expertise, which I have done during the last several years. During my doctoral study at Queen Mary University of London (QMUL), I have worked on the development of multi-agent embedded systems for distributed control power systems, which operate over IoT wireless communications protocols with different objectives. I have published several papers in high impact engineering journals and presented my research in top rank conferences around the world.</p>"},{"location":"#education","title":"Education","text":"<ul> <li>PhD in Electronic Engineering, Queen Mary University of London (QMUL), London, United Kingdom, 2021</li> <li>MSc in Control Systems Engineering, Shahid Beheshti University (SBU), Tehran, Iran, 2017</li> <li>BSc in Electrical Engineering, Power and Water University of Technology (PWUT), Tehran, Iran, 2013</li> </ul>"},{"location":"activities/","title":"Professional Activities","text":""},{"location":"activities/#embedded-control-system-design","title":"Embedded Control System Design","text":"<ul> <li>Control system design &amp; tuning (Linear &amp; Nonlinear systems)</li> <li>Digital control systems and filters</li> <li>Modelling and simulation of multi-domain networked systems</li> </ul>"},{"location":"activities/#embedded-software-engineering-development","title":"Embedded Software Engineering &amp; Development","text":"<ul> <li>Real-time operating system (RTOS) for ARM microcontrollers</li> <li>Embedded Linux for ARM processors, system on chips (SOCs), system on modules (SOMs), and system in package (SOPs)</li> </ul>"},{"location":"activities/#embedded-hardware-design","title":"Embedded Hardware Design","text":"<ul> <li>Microcontroller-based printed circuit board (PCB) design</li> <li>Analog signal conditioning interface</li> </ul>"},{"location":"contact/","title":"Contact","text":"<p>Address: Roku UK, 2 Cambridge Science Park Milton Rd, Milton, Cambridge CB4 0AF.</p> <p>Email: s.alavi@qmul.ac.uk,</p> <p>LinkedIn: https://www.linkedin.com/in/seyed-amir-alavi/</p> <p>X: https://x.com/samiralavi_real</p>"},{"location":"interests/","title":"Research Interests","text":"<p>I am currently focused on the following topics in my research:</p> <ul> <li>Distributed event-triggered consensus in multi-agent systems</li> <li>Secondary layer control of microgrids</li> <li>DC microgrid planning and optimization</li> <li>State estimation in distributed systems</li> <li>IoT-based monitoring of microgrids</li> <li>Real-time scheduling of control tasks on embedded systems</li> <li>Distributed ledger technologies for security of networked control systems</li> </ul>"},{"location":"privacy-policy/","title":"Privacy PolicyInterpretation and DefinitionsCollecting and Using Your Personal DataChildren's PrivacyLinks to Other WebsitesChanges to this Privacy PolicyContact Us","text":"<p>Last updated: March 30, 2022</p> <p>This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You.</p> <p>We use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been created with the help of the Privacy Policy Template.</p> Interpretation <p>The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.</p> Definitions <p>For the purposes of this Privacy Policy:</p> <ul> <li> <p>Account means a unique account created for You to access our Service or parts of our Service.</p> </li> <li> <p>Company (referred to as either \"the Company\", \"We\", \"Us\" or \"Our\" in this Agreement) refers to Seyed Amir Alavi.</p> </li> <li> <p>Cookies are small files that are placed on Your computer, mobile device or any other device by a website, containing the details of Your browsing history on that website among its many uses.</p> </li> <li> <p>Country refers to:  United Kingdom</p> </li> <li> <p>Device means any device that can access the Service such as a computer, a cellphone or a digital tablet.</p> </li> <li> <p>Personal Data is any information that relates to an identified or identifiable individual.</p> </li> <li> <p>Service refers to the Website.</p> </li> <li> <p>Service Provider means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service or to assist the Company in analyzing how the Service is used.</p> </li> <li> <p>Usage Data refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).</p> </li> <li> <p>Website refers to Seyed Amir Alavi, accessible from https://samiralavi.github.io/</p> </li> <li> <p>You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.</p> </li> </ul> Types of Data Collected Personal Data <p>While using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:</p> <ul> <li>Usage Data</li> </ul> Usage Data <p>Usage Data is collected automatically when using the Service.</p> <p>Usage Data may include information such as Your Device's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data.</p> <p>When You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data.</p> <p>We may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device.</p> Tracking Technologies and Cookies <p>We use Cookies and similar tracking technologies to track the activity on Our Service and store certain information. Tracking technologies used are beacons, tags, and scripts to collect and track information and to improve and analyze Our Service. The technologies We use may include:</p> <ul> <li>Cookies or Browser Cookies. A cookie is a small file placed on Your Device. You can instruct Your browser to refuse all Cookies or to indicate when a Cookie is being sent. However, if You do not accept Cookies, You may not be able to use some parts of our Service. Unless you have adjusted Your browser setting so that it will refuse Cookies, our Service may use Cookies.</li> <li>Flash Cookies. Certain features of our Service may use local stored objects (or Flash Cookies) to collect and store information about Your preferences or Your activity on our Service. Flash Cookies are not managed by the same browser settings as those used for Browser Cookies. For more information on how You can delete Flash Cookies, please read \"Where can I change the settings for disabling, or deleting local shared objects?\" available at https://helpx.adobe.com/flash-player/kb/disable-local-shared-objects-flash.html#main_Where_can_I_change_the_settings_for_disabling__or_deleting_local_shared_objects_</li> <li>Web Beacons. Certain sections of our Service and our emails may contain small electronic files known as web beacons (also referred to as clear gifs, pixel tags, and single-pixel gifs) that permit the Company, for example, to count users who have visited those pages or opened an email and for other related website statistics (for example, recording the popularity of a certain section and verifying system and server integrity).</li> </ul> <p>Cookies can be \"Persistent\" or \"Session\" Cookies. Persistent Cookies remain on Your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close Your web browser. You can learn more about cookies here: Cookies by TermsFeed Generator.</p> <p>We use both Session and Persistent Cookies for the purposes set out below:</p> <ul> <li> <p>Necessary / Essential Cookies</p> <p>Type: Session Cookies</p> <p>Administered by: Us</p> <p>Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.</p> </li> <li> <p>Cookies Policy / Notice Acceptance Cookies</p> <p>Type: Persistent Cookies</p> <p>Administered by: Us</p> <p>Purpose: These Cookies identify if users have accepted the use of cookies on the Website.</p> </li> <li> <p>Functionality Cookies</p> <p>Type: Persistent Cookies</p> <p>Administered by: Us</p> <p>Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.</p> </li> </ul> <p>For more information about the cookies we use and your choices regarding cookies, please visit our Cookies Policy or the Cookies section of our Privacy Policy.</p> Use of Your Personal Data <p>The Company may use Personal Data for the following purposes:</p> <ul> <li> <p>To provide and maintain our Service, including to monitor the usage of our Service.</p> </li> <li> <p>To manage Your Account: to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.</p> </li> <li> <p>For the performance of a contract: the development, compliance and undertaking of the purchase contract for the products, items or services You have purchased or of any other contract with Us through the Service.</p> </li> <li> <p>To contact You: To contact You by email, telephone calls, SMS, or other equivalent forms of electronic communication, such as a mobile application's push notifications regarding updates or informative communications related to the functionalities, products or contracted services, including the security updates, when necessary or reasonable for their implementation.</p> </li> <li> <p>To provide You with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.</p> </li> <li> <p>To manage Your requests: To attend and manage Your requests to Us.</p> </li> <li> <p>For business transfers: We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.</p> </li> <li> <p>For other purposes: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns and to evaluate and improve our Service, products, services, marketing and your experience.</p> </li> </ul> <p>We may share Your personal information in the following situations:</p> <ul> <li>With Service Providers: We may share Your personal information with Service Providers to monitor and analyze the use of our Service,  to contact You.</li> <li>For business transfers: We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.</li> <li>With Affiliates: We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners or other companies that We control or that are under common control with Us.</li> <li>With business partners: We may share Your information with Our business partners to offer You certain products, services or promotions.</li> <li>With other users: when You share personal information or otherwise interact in the public areas with other users, such information may be viewed by all users and may be publicly distributed outside.</li> <li>With Your consent: We may disclose Your personal information for any other purpose with Your consent.</li> </ul> Retention of Your Personal Data <p>The Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.</p> <p>The Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods.</p> Transfer of Your Personal Data <p>Your information, including Personal Data, is processed at the Company's operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to \u2014 and maintained on \u2014 computers located outside of Your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction.</p> <p>Your consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer.</p> <p>The Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information.</p> Disclosure of Your Personal Data Business Transactions <p>If the Company is involved in a merger, acquisition or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy.</p> Law enforcement <p>Under certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).</p> Other legal requirements <p>The Company may disclose Your Personal Data in the good faith belief that such action is necessary to:</p> <ul> <li>Comply with a legal obligation</li> <li>Protect and defend the rights or property of the Company</li> <li>Prevent or investigate possible wrongdoing in connection with the Service</li> <li>Protect the personal safety of Users of the Service or the public</li> <li>Protect against legal liability</li> </ul> Security of Your Personal Data <p>The security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security.</p> <p>Our Service does not address anyone under the age of 13. We do not knowingly collect personally identifiable information from anyone under the age of 13. If You are a parent or guardian and You are aware that Your child has provided Us with Personal Data, please contact Us. If We become aware that We have collected Personal Data from anyone under the age of 13 without verification of parental consent, We take steps to remove that information from Our servers.</p> <p>If We need to rely on consent as a legal basis for processing Your information and Your country requires consent from a parent, We may require Your parent's consent before We collect and use that information.</p> <p>Our Service may contain links to other websites that are not operated by Us. If You click on a third party link, You will be directed to that third party's site. We strongly advise You to review the Privacy Policy of every site You visit.</p> <p>We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.</p> <p>We may update Our Privacy Policy from time to time. We will notify You of any changes by posting the new Privacy Policy on this page.</p> <p>We will let You know via email and/or a prominent notice on Our Service, prior to the change becoming effective and update the \"Last updated\" date at the top of this Privacy Policy.</p> <p>You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.</p> <p>If you have any questions about this Privacy Policy, You can contact us:</p> <ul> <li>By email: s.alavi@qmul.ac.uk</li> </ul>"},{"location":"privacy-policy/#google-ads-cookies","title":"Google Ads Cookies","text":"<ul> <li>Third party vendors, including Google, use cookies to serve ads based on a user's prior visits to your website or other websites.</li> <li>Google's use of advertising cookies enables it and its partners to serve ads to your users based on their visit to your sites and/or other sites on the Internet.</li> <li>Users may opt out of personalized advertising by visiting Ads Settings.</li> </ul>"},{"location":"publications/","title":"Publications","text":"<p>For a complete list of my published research articles, refer to my Google Scholar profile.</p>"},{"location":"teaching/","title":"Teaching","text":""},{"location":"teaching/#academic","title":"Academic","text":""},{"location":"teaching/#advanced-control-systems-lecturer","title":"Advanced Control systems (Lecturer)","text":"<p>Semester B, 2019-20, and 2020-21 School of Electronic Engineering and Computer Science, Queen Mary University of London, London, UK</p>"},{"location":"teaching/#electrical-machines-teaching-assistant","title":"Electrical Machines (Teaching Assistant)","text":"<p>Semester A &amp; B, 2017-18 School of Electronic Engineering and Computer Science, Queen Mary University of London, London, UK</p>"},{"location":"teaching/#power-electronics-teaching-assistant","title":"Power Electronics (Teaching Assistant)","text":"<p>Semester A &amp; B, 2017-18 School of Electronic Engineering and Computer Science, Queen Mary University of London, London, UK</p>"},{"location":"teaching/#digital-systems-and-fpgas-teaching-assistant","title":"Digital Systems and FPGAs (Teaching Assistant)","text":"<p>Semester B, 2017-18 School of Electronic Engineering and Computer Science, Queen Mary University of London, London, UK</p>"},{"location":"teaching/#workshops","title":"Workshops","text":""},{"location":"teaching/#dc-dc-converter-design-using-arduino","title":"DC-DC converter design using Arduino","text":"<p>2021, London, UK</p>"},{"location":"teaching/#matlabsimulink-for-simulation-of-power-electronic-circuits","title":"MATLAB/Simulink for simulation of power electronic circuits","text":"<p>2020, London, UK</p>"},{"location":"teaching/#arduino-based-iot-product-development","title":"Arduino-based IoT product development","text":"<p>2016, Tehran, Iran</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/08/05/my-recent-project-activecpp/","title":"My Recent Project: ActiveCpp","text":"<p>I am excited to share my recent project, ActiveCpp, which is now live on my website samiralavi.github.io/activecpp/main. ActiveCpp is a powerful and versatile C++ library that simplifies asynchronous programming and enables developers to create highly responsive applications.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#why-activecpp","title":"Why ActiveCpp?","text":"<p>As a software developer, I have always been fascinated by the potential of asynchronous programming. However, I often found it challenging to write efficient and maintainable asynchronous code in C++. That's when I decided to create ActiveCpp. The original idea was in an abandoned repository lightful/syscpp, which helped me at the time a lot. Therefore I decided to revive this dead project and support it to further help the engineers like me develop event-driven systems in Modern C++ more efficiently.</p> <p>ActiveCpp provides a set of intuitive and easy-to-use abstractions that make it effortless to write asynchronous code. It leverages the power of coroutines and event-driven programming to handle concurrency and improve the responsiveness of C++ applications.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#key-features","title":"Key Features","text":"<p>ActiveCpp offers several key features that make it a valuable tool for C++ developers:</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#1-asynchronous-execution","title":"1. Asynchronous Execution","text":"<p>With ActiveCpp, you can easily define and execute asynchronous tasks. By using coroutines, you can write code that appears synchronous but executes asynchronously, allowing your application to remain responsive.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#2-event-driven-programming","title":"2. Event-Driven Programming","text":"<p>ActiveCpp embraces the event-driven programming paradigm, allowing you to handle events and triggers efficiently. You can define event handlers and subscribe to events, making it easier to build reactive and event-based systems.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#3-task-scheduling","title":"3. Task Scheduling","text":"<p>The library provides a flexible task scheduling mechanism that allows you to control the execution order and prioritize tasks. You can schedule tasks to run in parallel or sequentially, depending on your application's requirements.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#4-error-handling","title":"4. Error Handling","text":"<p>ActiveCpp simplifies error handling in asynchronous code. It provides mechanisms to propagate and handle errors gracefully, making it easier to write robust and fault-tolerant applications.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#getting-started-with-activecpp","title":"Getting Started with ActiveCpp","text":"<p>To get started with ActiveCpp, head over to samiralavi.github.io/activecpp/main and explore the documentation and examples. You will find comprehensive guides, tutorials, and API references to help you understand and utilize the library effectively.</p>"},{"location":"blog/2024/08/05/my-recent-project-activecpp/#conclusion","title":"Conclusion","text":"<p>ActiveCpp is a game-changer for C++ developers who want to harness the power of asynchronous programming. With its intuitive abstractions and powerful features, it simplifies the process of writing responsive and efficient code. I invite you to check out the project on my website and give it a try in your next C++ project.</p> <p>Happy coding!</p>"},{"location":"blog/2023/03/25/arduino-cheat-sheet-coaster-gold-printed-circuit-board-unique-gift-for-electronic-engineers-scientists-and-students/","title":"Arduino Cheat Sheet Coaster, Gold Printed Circuit Board, Unique Gift for Electronic Engineers, Scientists, and Students","text":"<p>I have designed this lovely coaster that reminds anyone of the perfect engineering embedded in Arduino after every sip of their coffee. It is made of high-quality printed circuit board (PCB) material, lead-free, and gold plated with nice round corners. It feels very professional and is a must if you work with electronic devices. The content of the cheat sheet is carefully chosen by me after working with Arduino for many years to include the mostly used commands and libraries.</p> <p>The coaster has the drawing of Arduino Uno board pin map for quick reference, making it easy to work with Arduino in lab.</p> <p>The item has the following specifications: </p> <p>Dimensions: 10 cm x 10 cm [3.94\" x 3.94\"] Thickness: 1.6 mm [0.04\"] Weight: 30g</p>"},{"location":"blog/2023/03/25/arduino-cheat-sheet-coaster-gold-printed-circuit-board-unique-gift-for-electronic-engineers-scientists-and-students/#order-options","title":"Order Options","text":"<p>You can order this coaster from my online shops (IoTUp) on these online marketplaces (for 30% discount use \"THANKYOU\" code at the checkout):</p> <ul> <li>IoTUp Shop on Etsy </li> <li>IoTUp Shop on Amazon</li> </ul>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/","title":"DC-DC Buck Converter with Arduino Uno","text":""},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#video-of-the-experiment","title":"Video of the Experiment","text":"<p>You can watch the video of this experiment by following this link: </p> <p></p>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#introduction","title":"Introduction","text":"<p>In this experiment, we want to build a cheap DC-DC buck converter using the common electronic components available online. The pulse width modulation (PWM) switching signal is generated using Arduino Uno and drives the gate of P-Channel Metal oxide silicon field effect transistor (MOSFET) through a bipolar junction transistor (BJT).</p> <p>A buck converter or a step-down converter is a DC-to-DC power converter, which steps down voltage (while stepping up current) from its input (supply) to its output (load). It is a class of switched-mode power supply (SMPS), typically containing at least two semiconductors (a diode and a transistor, although modern buck converters frequently replace the diode with a second transistor used for synchronous rectification) and at least one energy storage element, a capacitor, inductor, or the two in combination. To reduce voltage ripple, filters made of capacitors (sometimes in combination with inductors) are normally added to such a converter's output (load-side filter) and input (supply-side filter). </p> <p>First, the theory of DC-DC buck converter is provided. Second, the list of components used in this experiment is provided. Finally, the schematic and the circuit of the DC-DC converter is provided.</p>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#theory-of-dc-dc-buck-converter-operation","title":"Theory of DC-DC Buck Converter Operation","text":"<p>A basic circuit of a buck converter is provided. In order to study how it works, we will divide it in two stages. The ON and OFF stages. In the ON state, the switch is closed as we can see in the next figure, where the diode is open because the cathode voltage is higher than the anode. </p> <p></p> <p>Figure 1: Basic circuit for a DC-DC buck converter</p> <p>The switching transistor between the input and output of the buck converter continually switches on and off at high frequency. To maintain a continuous output, the circuit uses the energy stored in the inductor L, during the on periods of the switching transistor, to continue supplying the load during the off periods. The circuit operation depends on what is sometimes also called a Flywheel circuit. This is because the circuit acts rather like a mechanical flywheel that, given regularly spaced pulses of energy keeps spinning smoothly (outputting energy) at a steady rate.</p> <p>When the switch is first closed (on-state), the current will begin to increase, and the inductor will produce an opposing voltage across its terminals in response to the changing current. This voltage drop counteracts the voltage of the source and therefore reduces the net voltage across the load. Over time, the rate of change of current decreases, and the voltage across the inductor also then decreases, increasing the voltage at the load. During this time, the inductor stores energy in the form of a magnetic field. If the switch is opened while the current is still changing, then there will always be a voltage drop across the inductor, so the net voltage at the load will always be less than the input voltage source. When the switch is ON the inductor will charge up and the voltage on the inductor will be the difference between the output and the input. But we also know that the inductor voltage is the inductance L multiplied by the inductor current derivate. As we can see in the next figure, we obtain the ON current through the inductor. </p> <p></p> <p></p> <p>Figure 2: ON state of the buck converter</p> <p>When the switch is opened again (off-state), the voltage source will be removed from the circuit, and the current will decrease. The decreasing current will produce a voltage drop across the inductor (opposite to the drop at on-state), and now the inductor becomes a Current Source. The stored energy in the inductor's magnetic field supports the current flow through the load. This current, flowing while the input voltage source is disconnected, when concatenated with the current flowing during on-state, totals to current greater than the average input current (being zero during off-state). The \"increase\" in average current makes up for the reduction in voltage, and ideally preserves the power provided to the load. During the off-state, the inductor is discharging its stored energy into the rest of the circuit. If the switch is closed again before the inductor fully discharges, the voltage at the load will always be greater than zero. In this case the voltage across the inductor is the output voltage. So once again using the next figure formulas we obtain the current of the OFF part.</p> <p></p> <p></p> <p>Figure 3: OFF state of the buck converter</p> <p>Now if we want to obtain the output depending on the input and the duty cycle of the PWM all we have to do is to make the sum of the On and Off current equal to 0. That means that the On current is equal to the Off current. So, this will give us: </p> <p></p> <p>Figure 4: Input-output voltage equation</p>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#list-of-components-for-the-building-and-testing-the-dc-dc-buck-converter","title":"List of components for the building and testing the DC-DC buck converter","text":"Component Quantity IRF4905PBF 1 1N5819 1 Panasonic 100\u03bcF 16V Electrolytic Capacitor 2 150 \u03bcH \u00b115% Power Inductor, 2A Idc, 106m\u03a9 Rdc 1 SS8050DTA NPN Transistor, 1.5 A, 25 V 1 1k\u03a9 Resistor 2 10k\u03a9 Through Hole Trimmer Potentiometer 1 Jumper wires (male to male) 10 9V battery 1 9V battery contact 1 Arduino Uno with USB cable 1 Osciloscopte 1 Breadboard 1"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#building-the-dc-dc-buck-converter-circuit-using-arduino-as-the-pwm-source","title":"Building the DC-DC buck converter circuit using Arduino as the PWM source","text":"<p>The Arduino UNO already has a 5V linear voltage regulator that will lower the efficiency of the circuit. So the main goal is to learn how the circuit, the feedback and the PWM signal work in order to achieve the desired output.</p> <p></p> <p>Figure 5: Schematic of Arduino-based DC-DC buck converter</p> <p>As you can see in the schematic above we have a potentiometer connected to the analog input A0. With this potentiometer we will choose the output value between 1 and 9 volts since the maximum input voltage in this case is 9V. With the Arduino's ADC we will read a value between 0 and 1024, next, in the code we map that value from 1 to 244 which are the values used with the analogWrite function of the Arduino. With this we will apply a PWM signal on pin D3 where 1 is the lowest duty cycle and 244 the maximum. Since the Arduino digital value is 5V we add a small BJT driver using one S8050 NPN and two resistors of 1k. The output of this driver is connected to the gate of the IRF4905 P-MOSFET.  </p> <p>Connect everything as in the schematic above and upload the next code to your Arduino and start moving the potentiometer. Observe the output on the oscilloscope.</p> <p>This circuit is able to increase and decrease the voltage and keep that value steady for the same LOAD, in this case a 100 ohm resistor, as we can see in the picture below. But if we change the output load the discharge time of the output will change as well since for lower loads there will be a higher amount of current passing. So if the discharging time is faster or slower the duty cycle should change as well. For that we should add a feedback system to our circuit that would sense the output voltage and correct the PWM duty in order to keep the same desired value. In the next figure, you can find the real connection on the prototyping board with the connection to Arduino UNO. </p> <p></p>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#arduino-code-for-pwm-generation","title":"Arduino Code for PWM Generation","text":"<pre><code>#include &lt;Arduino.h&gt;\n\n//Analog input pin for the potentiometer\nint potentiometer_pin = A0; \n\n// PWM output pin\nint pwm_pin = 3;          \n\n\nvoid setup() {\n  // Adjusts the pin to input mode\n  pinMode(potentiometer_pin, INPUT);\n  // Adjusts the pin to output mode\n  pinMode(pwm_pin, OUTPUT);\n\n  // Adjusts the PWM frequency to 980.39 Hz.\n  // By default arduino PWM frequency is 490.20 Hz, \n  // but this value is not high enough to have a stable DC output voltage in low duty cycles.\n  TCCR2B = TCCR2B &amp; B11111000 | B00000011;\n}\n\nvoid loop() {  \n\n  // Reads the voltage of the potentiometer to a value between 0 to 1023\n  // The resolution of ADC on Arduino is 10 bits.\n  int duty_cycle = analogRead(potentiometer_pin);\n\n  // Maps the value from [0 1023] to [0 255] for the PWM function of Arduino\n  int duty_cycle_mapped = map(duty_cycle, 0, 1024, 0, 254);\n\n  // Sets the PWM signal duty cyle value, 0-&gt;0%, 254-&gt;100%\n  analogWrite(pwm_pin, duty_cycle_mapped);\n}\n</code></pre>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#important-notes","title":"Important Notes","text":"<ul> <li>Make sure all of the components are connected correctly before connecting the battery.</li> <li>Take enough care to keep the battery contact wires not touching each other, otherwise it will be short circuit and the battery becomes hot and loses its energy.</li> <li>Don't forget to program the Arduino with the code provided, otherwise you won't see anything on the output.</li> <li>Try find the resistor values by their color code. They should be 1k resistors.</li> </ul>"},{"location":"blog/2020/11/22/dc-dc-buck-converter-with-arduino-uno/#video-of-the-experiment_1","title":"Video of the Experiment","text":"<p>You can watch the video of this experiment by following this link: Video on Youtube</p>"},{"location":"blog/2022/05/03/firmware-co-design--development-for-ip-cores-in-csystemc-using-verilator/","title":"Firmware Co-Design &amp; Development for IP Cores in C++/SystemC using Verilator","text":"<p>Co-design of software and hardware for FGPA-based embedded systems has become a major challenge for tech companies, pushing them to follow development processes that require special care to lower the risks. The risk becomes a major factor for system on chip (SoC) solutions with integrated intellectual property (IP) cores that require custom firmware or driver development. A solution to this problem that has received a lot of interest in the last few years is by simulating the IPs and using them to design and validate the corresponding software stacks. Verilator is an open-source tool that is specifically developed for this purpose to simulate the IPs written in Verilog or SystemVerilog hardware description languages. In this talk, I am going to discuss the following topics for the audience:</p> <ul> <li>A brief introduction to SystemC and simulation of logic blocks in C++</li> <li>Common processes for co-design of firmware and FPGA IP cores</li> <li>Introduction to Verilator and using it for creating simulation models from IP cores</li> <li>Protecting IPs by encrypting their simulated models and sharing pre-releases</li> <li>An example workflow for Verilog IP simulation and firmware design in C++</li> <li>Analysis of simulation results with open source tools</li> <li>Real-time simulation of verilated models with QEMU for system integration</li> </ul> <p>The presentation slides are available on SlideShare. My video presentation is available on Embedded Online Conference 2022 website.</p> Firmware Co-Design &amp; Development for IP Cores in C++/SystemC using Verilator  from SeyedAmirAlavi"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/","title":"Communication Patterns for Distributed Control Systems and IoT Devices","text":"<p>There are several communication models that can be used in a distributed control system. Each model has its pros and cons, therefore the system designer has to decide which model to employ for the implementation of the control system based on what each pattern offers. In this article, several communication patterns are reviewed and compared with each other to understand their use cases. In the following, a comparative analysis has been given for a number of common communication patterns, for the purpose of the appropriate employment in distributed control systems and IoT devices.</p> <p> </p> Figure 1: a) Request-Response pattern, and b) Events pattern"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#1-request-response","title":"1) Request-Response","text":"<p>This communication model is one of the most commonly known models. It consists of a client that requests a service from a server, as shown in Figure 1 (a). It is a useful model for the client-server or master-slave architectures, however, a drawback of this model is the inequality of participants, which is apparent in the network topology. This makes it difficult for the bidirectional communication scenario, in which both the parties request information from each other, especially if firewalls are present. Consequently, either events, event-subscriptions, or security is difficult to manage, and require additional services and substantial resources if firewalls are used in the network.</p>"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#2-event-subscription","title":"2) Event-Subscription","text":"<p>This communication model allows a client to subscribe to events of a given type from a server. The server then informs the client each time the event is triggered, without having to constantly poll the server, as in Figure 1 (b). Advanced event-subscription mechanisms can include client-\u00adspecific requirements of when events are desired and under what conditions. The benefits of using this communication model are that half of the messages are not needed over time, and the latency of updates is kept to a minimum. The problem with this model is that it is not designed for the multiparty communication scenario. This can be further solved using the publish-subscribe model.</p>"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#3-multicasting","title":"3) Multicasting","text":"<p>The previous models are primarily considered for the communication purposes between two entities. However, a more efficient model is required in cases when the same information has to be sent to multiple entities at the same time. Here, a sender sends one message through an intermediary (i.e., a broker or a router) which then distributes it to multiple recipients that have all requested participation in the communication. This model saves the bandwidth because the sender does not have to send individual messages to all the parties by itself. Also, the sender does not even have to know who the recipients are.</p> <p>Although one can use this model in order to save the bandwidth, it is often used as a means of overcoming the restrictions in the chosen protocol, and its support of the event-subscription model, as well. In addition, multicasting is inherently difficult to secure, and it is more efficient in terms of the bandwidth only if the recipients actually use most of the transmitted values. In the case where frequent multicasting for decreasing the latency in the network is desired but not possible, the multicasting model might result in the increase rather than decrease in the required bandwidth.</p>"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#4-queues","title":"4) Queues","text":"<p>The first-in, first-out queues, is a model that allows one or more entities to post the messages or tasks into a queue, and then lets one or more receivers receive the messages in an ordered fashion. The queues reside on an intermediary node or network to which all participants are connected. This model is an excellent tool for the load balancing purposes, where the collected tasks from multiple sources need to be distributed among the existing workers, perhaps having different performances. Queues can hardly be used for real-time communications in control systems, since the message should be saved at first, and then be processed at the controller via an intermediary node.</p>"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#5-publish-subscribe","title":"5) Publish-Subscribe","text":"<p>This communication model is an extension of the multicasting model, with the difference that messages transmitted are stored in the intermediary node. The messages, or a reference to the messages, are distributed to the corresponding subscribers, depending on the protocol. Also, only the latest message is stored, a given number of messages are stored, or all messages are stored in the intermediary, depending on the chosen protocol, as well as the settings of the intermediary. The difference between distributing the entire message and distributing only a reference to the message is important and affects the performance of the solution in terms of the consumed bandwidth. If the subscribers consume most of the messages, forwarding the messages themselves is more efficient, as in the case of multicasting. If, however, consumption occurs only on demand, then sending shorter references is more efficient because these messages are smaller and subscribers would use only a minority of them to fetch an actual message. In order to fetch a message in the latter case, a separate request-response action needs to be performed.</p> <p>The behavior of each model has been analyzed from the control point of view. In this treatise, the publish-subscribe communication model is used for the practical implementation of the distributed event-based control strategy. In the publish-subscribe model, a node can act as a publisher, subscriber, or both simultaneously. The network roles can be dynamically changed to ensure a flexibility to reconfigure the directions of the data exchange. The main advantage of this model is that the data can be exchanged intelligently between the devices (i.e., the publishers send the data to the specific subscribers without having a subscription knowledge of each node). This keeps the setup process easier for the overall maintenance of the network, and enables the self-configuration of the devices, as one of the primary characteristics of the industrial ad-hoc networks. The process of selecting messages for the reception and processing is called filtering. The topic-based and content-based filtering are the two common forms of filtering used in new communication protocols introduced in the context of IoT. In the publish-subscribe network setup, a server manages the topics and contents, which is called a broker. The broker-free setup can be achieved with the distributed topics/contents suitable for the proposed distributed control structure. The topic-based publish-subscribe communication model also enables the selective message distribution among a number of sources and sinks. Messages are associated with the topics and are selectively routed to destinations with matching topic interests. Subscribers show their interest in receiving data with a given topic and data sources publish messages on the topics.</p>"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#conclusion","title":"Conclusion","text":"<p>In general, publish-subscribe communication is a potential solution the requirements of distributed control systems and IoT devices, however, the existence of a broker might increase communication delay in the feedback loop. The main advantages of the publish-subscribe communication model compared with the aforementioned models can be summarized as:</p> <ul> <li>Adaptive role change in a dynamic environment from the publisher to the subscriber and vice versa.</li> <li>Intelligent data exchange among the nodes without having a subscription knowledge of each node.</li> <li>Automatic self-configuration of the nodes in the ad-hoc network without a central configurator which enables the plug and play operation of the control system.</li> <li>Intrinsic discrete event transmission support which suits it as an ideal choice for the event-triggered control.</li> </ul>"},{"location":"blog/2021/11/05/communication-patterns-for-distributed-control-systems-and-iot-devices/#references","title":"References","text":"<p>[1] S. A. Alavi, K. Mehran, Y. Hao, A. Rahimian, H. Mirsaeedi and V. Vahidinasab, \"A Distributed Event-Triggered Control Strategy for DC Microgrids Based on Publish-Subscribe Model Over Industrial Wireless Sensor Networks,\" in IEEE Transactions on Smart Grid, vol. 10, no. 4, pp. 4323-4337, July 2019.</p> <p>[2] S. Amir Alavi, A. Rahimian, K. Mehran and J. Mehr Ardestani, \"An IoT-Based Data Collection Platform for Situational Awareness-Centric Microgrids,\" 2018 IEEE Canadian Conference on Electrical &amp; Computer Engineering (CCECE), 2018, pp. 1-4.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/","title":"Share USB Devices with WSL &amp; Docker Containers","text":"<p>Recently, I have faced an issue in accessing my USB JLink programmer from inside a docker container using WSL 2. I have found that this process is not well documented and requires advanced understanding of how USB devices work under WSL and inside Linux. After spending a few hours and playing with different tools and commands, I decided to document the steps I have followed here for the community.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#my-system-configuration","title":"My System Configuration","text":"<p>For your information, I have mentioned my system configuration here:</p> <ul> <li>OS: Windows 11,</li> <li>WSL: WSL 2 with Ubuntu 22.04 and Docker Desktop</li> <li>My USB device: JLink USB Programmer from SEGGER.</li> <li>Debugger tool: OpenOCD (still <code>udev</code> rules from JLink software package is requird)</li> </ul> <p>I expect the process doesn't change drastically if you work on Windows 10 or you use another Linux OS for your WSL instance. However, different USB devices require different rules for <code>udev</code> Linux utility to make them available for <code>non-root</code> users.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#step-1-install-uspipd-win-project-and-attach-usb-devices-to-wsl-instance","title":"Step 1: Install USPIPD-Win project and attach USB devices to WSL instance","text":"<p>Follow the steps in the official guide from Microsoft and attach your connected USB devices to your Ubuntu WSL.</p> <p>Note</p> <p>You need to run PowerShell as administrator and do this step every time you want to attach a USB device to your WSL. Also, after rebooting your PC or reconnecting the USB device, you have to do this step again as the attachment is temporary. I recommend keeping the PowerShell terminal open in the background if you need to disconnect and connect your device frequently. Also, if the USB devices get reset, this step has to be done again, but for debuggers like JLink this won't be an issue as they don't reset themselves, but the target.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#step-2-fix-udev-rules-in-ubuntu-wsl-give-access-to-non-root-user","title":"Step 2: Fix <code>udev</code> rules in Ubuntu WSL (give access to <code>non-root</code> user)","text":"<p>By default in Ubuntu, USB devices are only accessible by the root user. USB serial devices will appear under <code>/dev/ttyUSB*</code> or <code>/dev/ttyACM*</code> and are accessible by <code>non-root</code> users if the user is in the <code>dialout</code> group. However, for other devices, there is this tool called <code>udev</code> in Ubuntu and other Linux OSs that changes the permission of the USB device based on the rules defined in <code>/etc/udev/rules.d/*</code> and lets the <code>non-root</code> users to access them.</p> <p>To let <code>udev</code> detect your device, you need to copy the rules for JLink programmer defined <code>99-jlink.rules</code> file in the JLink Software Package into the <code>/etc/udev/rules.d/</code>. If you use OpenOCD instead of JLink debugger utilities, you still need to copy the udev rules for JLink devices, but the reset of JLink utilities are not needed anymore.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#step-3-enable-udev-service-to-auto-start-in-wsl","title":"Step 3: Enable <code>udev</code> service to auto start in WSL","text":"<p>WSL doesn't come with services enabled at boot. <code>udev</code> is a service program that need to run in the background to detect changes to the USB bus and the connected devices. There are two ways to auto start services in WSL on Windows 11: </p> <ol> <li>Enable <code>systemd</code> for your all WSL instances in the <code>.wslconfig</code>. </li> <li>Add the startup command to the <code>wsl.conf</code> file in your WSL instance.</li> </ol> <p>Here I have taken the second approach as it doesn't mess with the other WSL instances. Add the following block to your to <code>/etc/wsl.conf</code>: <pre><code>[boot]\ncommand=\"service udev start\"\n</code></pre> For further information on WSL configuration and the accepted parameters check this guide from Microsoft. Windows 10 users should follow similar steps differently. Please refer to this stackoverflow response for further information.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#step-4-share-usb-devices-with-docker","title":"Step 4: Share USB devices with Docker","text":"<p>If you have another level of virtualization for your development environment using Docker (e.g. VSCode Containerized Development Environment), you can share all of your WSL USB devices with your container by passing the following arguments to the <code>docker run</code> command: <code>--privileged -v /dev/bus/usb/:/dev/bus/usb</code>. It is also possible to share only a specific device instead of giving access to the USB bus. You can find more information in this stackoverflow response.</p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#optional-final-step","title":"(Optional) Final Step","text":"<p>Now you see the USB devices by running the following command in your WSL and docker container: <pre><code>lsusb\n</code></pre> If your docker container doesn't have the <code>udev</code> utilities included, you need to add them to the docker image. If the image is based on Debian, you can install the following packages (some of them are required for OpenOCD to work): <pre><code>sudo apt-get update\nsudo apt-get install udev usbutils libusb-0.1-4 libusb-dev\n</code></pre></p>"},{"location":"blog/2023/03/25/share-usb-devices-with-wsl--docker-containers/#final-notes","title":"Final Notes","text":"<p>Sharing USB devices with WSL in Windows 11 seems to be easier that Windows 10. I have been using it for a while and it was stable enough to be called reliable. Please contact me if you had questions/feedback or found some information here misleading for me to update.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/archive/2020/","title":"2020","text":""}]}